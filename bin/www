#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("newpj-fe:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const { Server } = require("socket.io");
const io = new Server(server);

const { Kafka, CompressionTypes, logLevel } = require("kafkajs");

const host = process.env.KAFKA_URI || ip.address();

const kafka = new Kafka({
    logLevel: logLevel.DEBUG,
    brokers: [`${host}:${process.env.KAFKA_PORT}`],
    clientId: "producer-fe",
});

const topic = "trackking";

io.on("connection", async (socket) => {
    const producer = kafka.producer();
    const sendMessage = (message) => {
        return producer
            .send({
                topic,
                compression: CompressionTypes.GZIP,
                messages: [{ key: "", value: message }],
            })
            .then(console.log)
            .catch((e) => console.error(`${e.message}`, e));
    };
    await producer.connect();
    const client_event = { sessionId: socket.id, event: "connected" };
    sendMessage(JSON.stringify(client_event));
    socket.on("event_kafka", (msg) => {
        msg_object = JSON.parse(msg);
        const client_event = { sessionId: socket.id, event: msg_object };
        sendMessage(JSON.stringify(client_event));
    });
    socket.on("disconnect", async (reason) => {
        const client_event = { sessionId: socket.id, event: "disconnected" };
        sendMessage(JSON.stringify(client_event));
        await producer.disconnect();
    });
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
}
